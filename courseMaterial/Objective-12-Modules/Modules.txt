modules 

types of modules  : 

1. Unnamed
2. Automatic
3. Named


using modules
- module interaction
- unnamed & autimatic modules


compilation process
 - 
 
 --module-path test --module calculatorModule/org.calculations.Run 2 34 54
 
 
-classpath , -cp 
--module-source-path, --module-path , --module
-C

jlink

transitive dependency
combined compilation
combining classpath + --module<>


javac -d <output directory> --module-source-path <moduler source path> --module <module name>

unnamed modules
automtic module

Module folder name and module name in module-info.java should be same while compiling
--module or -m should be the last statement in the command
--module or -m follows module name which is followed by the fqcn main class name in csae of folder and in case of jar file if Main-class attribute is set then passing main class name is optional
In linux/unix module path are separated by : and windows ;

When multiple modules with the same name are present on the module path , the first module is selected as the current module
Multiple module  names in --modules should be separated by comma and not semicolon
Whenever we compile a module which specifically states the requiring module and if that module is not present in the path then compilation
succeeds with a warning
if exported package does not exist or is empty then the compiler throws an error
Only one package name can be specified on a line in module-info.java
Implied readability means transitive dependecy


What are modules ? Their utility.
Types of modules
Requiring and exporting 
compilation and execution.
jlink
examples

Modules that are not defined in the Java SE 9 Platform Specification but instead specific to the JDK will, by convention, share the “jdk.” name prefix.

export public


ProblemRequest HR-196490 has been added successfully.

Any application in java requires jar on it classpath. These jar files are generally supplied at runtime while executing java or javac command.
There is no way a jar file can tell the runtimne environment about the required jar files. Due to this actual dependency resolution happens at the runtime and hence leads to classnotfoundexception or noclassdeffounderror.